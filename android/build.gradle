group 'com.example.ptnet_plugin'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.9.0'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.example.ptnet_plugin'
    }

    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 24
    }

    dependencies {
        androidTestImplementation 'androidx.test.ext:junit:1.1.5'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
        testImplementation 'junit:junit:4.13.2'

        // Required Libs
        implementation "dnsjava:dnsjava:3.5.3"
        implementation "androidx.core:core-ktx:1.13.1"
        implementation "androidx.compose.ui:ui:1.6.7"
        implementation "com.google.code.gson:gson:2.10.1"
        implementation "com.zaxxer:jnb-ping:1.3.2"
        implementation "com.squareup.okhttp3:okhttp:4.12.0"
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.7.0"

        // AAR Lib
//        implementation files("libs/shared-release-v0.0.1.aar")
        implementation files("libs/shared-debug-v1.0.2.aar")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }

    // Ignore bundleDebugAar
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(":ptnet_plugin:bundleDebugAar")) {
            tasks.getByPath(":ptnet_plugin:bundleDebugAar").enabled = false
        }
    }
}
